// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fulltextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Job {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String
  description       String?
  short_description String?
  imageUrl          String?
  isPublished       Boolean       @default(false)
  tags              String[]
  savedUsers        String[]
  shiftTiming       String?
  hourlyRate        String?
  yearsOfExperience String?
  workMode          String?
  categoryId        String?       @db.ObjectId
  category          Category?     @relation(fields: [categoryId], references: [id])
  companyId         String?       @db.ObjectId
  company           Company?      @relation(fields: [companyId], references: [id])
  attachments       Attachments[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())

  @@index([categoryId])
  @@index([companyId])
  @@fulltext([title])
}

model Company {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  name           String
  description    String?
  industry       String?
  logo           String?
  coverImage     String?
  mail           String?
  website        String?
  linkedIn       String?
  address_line_1 String?
  address_line_2 String?
  city           String?
  state          String?
  zipcode        String?
  jobs           Job[]
  followers      String[]
  overview       String?
  whyJoinUs      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Attachments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  name      String
  jobId     String?  @db.ObjectId
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserProfile {
  userId               String          @id @map("_id")
  fullName             String? //done
  email                String? //done
  roleId               String?         @db.ObjectId //done
  role                 Role?           @relation(fields: [roleId], references: [id]) //done
  biography            String? //done
  website              String? //done
  city                 String? //done
  country              String? //done
  contact              String? //done
  linkedIn             String? //done
  github               String? //done
  twitter              String? //done
  facebook             String? //done
  instagram            String? //done
  skillLevelId         String?         @db.ObjectId //done
  skillLevel           SkillLevel?     @relation(fields: [skillLevelId], references: [id]) //done
  skills               String[] //done
  appliedJobs          AppliedJob[]
  resumes              Resumes[] //done
  activeResumeId       String? //done
  userBanner           String?
  jobExperience        JobExperience[] //done
  education            Education[] //done
  portfolio            Portfolio[]
  portfolioDescription String?
  connections          String[]
}

model Role {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String        @unique
  users     UserProfile[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model SkillLevel {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String        @unique
  users     UserProfile[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model JobExperience {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  userProfileId    String
  userProfile      UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  jobTitle         String
  employmentType   String
  companyName      String
  location         String
  startDate        DateTime?
  currentlyWorking Boolean?
  endDate          DateTime?
  description      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())

  @@index([userProfileId], name: "idj_userProfileId")
}

model Education {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userProfileId     String
  userProfile       UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  university        String
  degree            String
  fieldOfStudy      String
  grade             String?
  startDate         DateTime?
  currentlyStudying Boolean?    @default(false)
  endDate           DateTime?
  description       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  @@index([userProfileId], name: "ide_userProfileId")
}

type AppliedJob {
  jobId     String
  appliedAt DateTime @default(now())
}

model Resumes {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  url           String
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  @@index([userProfileId], name: "idr_userProfileId")
}

model Portfolio {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  url           String
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  @@index([userProfileId], name: "idp_userProfileId")
}
